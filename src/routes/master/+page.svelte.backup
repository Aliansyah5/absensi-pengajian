<script>
	import { onMount } from 'svelte';
	import { goto } from '$app/navigation';
	import { MasterDataService } from '$lib/services/masterData.js';
	import AppHeader from '$lib/components/AppHeader.svelte';
	import BottomNav from '$lib/components/BottomNav.svelte';
	import {
		Database, Users, MapPin, Building, BookOpen,
		FileText, Shield, List, Home, Globe, ChevronDown, AlertCircle
	} from 'lucide-svelte';

	let isLoading = true;
	let userRole = 'user';
	let isSuperAdmin = false;
	let message = { type: '', text: '', show: false };
	let innerWidth = 0;

	$: isDesktop = innerWidth >= 768;

	// Master data cards configuration
	const masterCards = [
		{
			id: 'pengajian',
			title: 'Pengajian',
			description: 'Kelola data pengajian dan jadwal',
			icon: BookOpen,
			color: 'bg-blue-500',
			route: '/master/pengajian',
			count: 0
		},
		{
			id: 'daerah',
			title: 'Daerah',
			description: 'Kelola data daerah',
			icon: MapPin,
			color: 'bg-green-500',
			route: '/master/daerah',
			count: 0
		},
		{
			id: 'desa',
			title: 'Desa',
			description: 'Kelola data desa',
			icon: Home,
			color: 'bg-yellow-500',
			route: '/master/desa',
			count: 0
		},
		{
			id: 'kelompok',
			title: 'Kelompok',
			description: 'Kelola data kelompok',
			icon: Users,
			color: 'bg-purple-500',
			route: '/master/kelompok',
			count: 0
		},
		{
			id: 'masjid',
			title: 'Masjid',
			description: 'Kelola data masjid',
			icon: Building,
			color: 'bg-indigo-500',
			route: '/master/masjid',
			count: 0
		},
		{
			id: 'kategori',
			title: 'Kategori',
			description: 'Kelola kategori jamaah',
			icon: List,
			color: 'bg-pink-500',
			route: '/master/kategori',
			count: 0
		},
		{
			id: 'hadist',
			title: 'Hadist',
			description: 'Kelola data kitab hadist',
			icon: FileText,
			color: 'bg-orange-500',
			route: '/master/hadist',
			count: 0
		},
		{
			id: 'alquran',
			title: 'Al-Quran',
			description: 'Kelola data surat Al-Quran',
			icon: BookOpen,
			color: 'bg-teal-500',
			route: '/master/alquran',
			count: 0
		},
		{
			id: 'dapukan',
			title: 'Dapukan',
			description: 'Kelola data dapukan',
			icon: Globe,
			color: 'bg-red-500',
			route: '/master/dapukan',
			count: 0
		},
		{
			id: 'jamaah',
			title: 'Jamaah',
			description: 'Kelola data jamaah',
			icon: Users,
			color: 'bg-cyan-500',
			route: '/master/jamaah',
			count: 0
		}
	];
	// Reactive statements untuk filtering data
	$: {
		console.log('Reactive update triggered - selectedTab:', selectedTab);
		console.log('Current data length:', getCurrentData().length);
		filteredData = filterData(getCurrentData(), searchQuery);
		console.log('Filtered data length:', filteredData.length);
	}

	// Tab configuration with better icons and descriptions
	const tabs = [
		{ id: 'pengajian', label: 'Pengajian', icon: BookOpen, color: 'bg-blue-500', description: 'Kelola data pengajian' },
		{ id: 'daerah', label: 'Daerah', icon: MapPin, color: 'bg-green-500', description: 'Kelola data daerah' },
		{ id: 'desa', label: 'Desa', icon: Building, color: 'bg-orange-500', description: 'Kelola data desa' },
		{ id: 'kelompok', label: 'Kelompok', icon: Users, color: 'bg-purple-500', description: 'Kelola data kelompok' },
		{ id: 'masjid', label: 'Masjid', icon: Building, color: 'bg-indigo-500', description: 'Kelola data masjid' },
		{ id: 'kategori', label: 'Kategori', icon: FileText, color: 'bg-pink-500', description: 'Kelola kategori jamaah' },
		{ id: 'hadist', label: 'Hadist', icon: BookOpen, color: 'bg-yellow-500', description: 'Kelola data hadist' },
		{ id: 'alquran', label: 'Al-Quran', icon: BookOpen, color: 'bg-emerald-500', description: 'Kelola data Al-Quran' },
		{ id: 'dapukan', label: 'Dapukan', icon: Users, color: 'bg-cyan-500', description: 'Kelola data dapukan' },
		{ id: 'jamaah', label: 'Jamaah', icon: Users, color: 'bg-red-500', description: 'Kelola data jamaah' }
	];

	onMount(async () => {
		// Check URL parameter for tab
		const urlParams = new URLSearchParams(window.location.search);
		const tabParam = urlParams.get('tab');
		if (tabParam && tabs.find(tab => tab.id === tabParam)) {
			selectedTab = tabParam;
		}

		await checkUserPermission();
		if (isSuperAdmin) {
			await loadData();
		}
		isLoading = false;
	});

	async function checkUserPermission() {
		try {
			console.log('Checking user permission...');
			userRole = await MasterDataService.getUserRole();
			console.log('User role:', userRole);
			isSuperAdmin = await MasterDataService.isSuperAdmin();
			console.log('Is super admin:', isSuperAdmin);

			if (!isSuperAdmin) {
				showMessage('error', 'Akses ditolak. Halaman ini hanya untuk Super Admin.');
				setTimeout(() => {
					goto('/dashboard');
				}, 2000);
			}
		} catch (error) {
			console.error('Error checking permission:', error);
			showMessage('error', 'Gagal memeriksa permission.');
		}
	}

	async function loadData() {
		isDataLoading = true;
		console.log('Loading data for tab:', selectedTab);
		try {
			switch (selectedTab) {
				case 'pengajian':
					console.log('Calling PengajianService.getAllPengajian()');
					try {
						pengajianList = await PengajianService.getAllPengajian();
						console.log('Pengajian data loaded:', pengajianList);
						if (!pengajianList || pengajianList.length === 0) {
							console.warn('No pengajian data found. Check database tables.');
						}
					} catch (error) {
						console.error('Error loading pengajian:', error);
						pengajianList = [];
					}
					break;
				case 'daerah':
					console.log('Calling DaerahService.getAllDaerah()');
					try {
						daerahList = await DaerahService.getAllDaerah();
						console.log('Daerah data loaded:', daerahList);
						if (!daerahList || daerahList.length === 0) {
							console.warn('No daerah data found. Check database tables.');
						}
					} catch (error) {
						console.error('Error loading daerah:', error);
						daerahList = [];
					}
					break;
				case 'desa':
					console.log('Calling DesaService.getAllDesa()');
					try {
						desaList = await DesaService.getAllDesa();
						console.log('Desa data loaded:', desaList);
						if (!desaList || desaList.length === 0) {
							console.warn('No desa data found. Check database tables.');
						}
					} catch (error) {
						console.error('Error loading desa:', error);
						desaList = [];
					}
					break;
				case 'kelompok':
					console.log('Calling KelompokService.getAllKelompok()');
					try {
						kelompokList = await KelompokService.getAllKelompok();
						console.log('Kelompok data loaded:', kelompokList);
						if (!kelompokList || kelompokList.length === 0) {
							console.warn('No kelompok data found. Check database tables.');
						}
					} catch (error) {
						console.error('Error loading kelompok:', error);
						kelompokList = [];
					}
					break;
				case 'masjid':
					console.log('Calling MasjidService.getAllMasjid()');
					try {
						masjidList = await MasjidService.getAllMasjid();
						console.log('Masjid data loaded:', masjidList);
						if (!masjidList || masjidList.length === 0) {
							console.warn('No masjid data found. Check database tables.');
						}
					} catch (error) {
						console.error('Error loading masjid:', error);
						masjidList = [];
					}
					break;
				case 'kategori':
					console.log('Calling KategoriService.getAllKategori()');
					try {
						kategoriList = await KategoriService.getAllKategori();
						console.log('Kategori data loaded:', kategoriList);
						if (!kategoriList || kategoriList.length === 0) {
							console.warn('No kategori data found. Check database tables.');
						}
					} catch (error) {
						console.error('Error loading kategori:', error);
						kategoriList = [];
					}
					break;
				case 'hadist':
					console.log('Calling HadistService.getAllHadist()');
					try {
						hadistList = await HadistService.getAllHadist();
						console.log('Hadist data loaded:', hadistList);
						if (!hadistList || hadistList.length === 0) {
							console.warn('No hadist data found. Check database tables.');
						}
					} catch (error) {
						console.error('Error loading hadist:', error);
						hadistList = [];
					}
					break;
				case 'alquran':
					console.log('Calling AlQuranService.getAllAlQuran()');
					try {
						alquranList = await AlQuranService.getAllAlQuran();
						console.log('AlQuran data loaded:', alquranList);
						if (!alquranList || alquranList.length === 0) {
							console.warn('No alquran data found. Check database tables.');
						}
					} catch (error) {
						console.error('Error loading alquran:', error);
						alquranList = [];
					}
					break;
				case 'dapukan':
					console.log('Calling DapukanService.getAllDapukan()');
					try {
						dapukanList = await DapukanService.getAllDapukan();
						console.log('Dapukan data loaded:', dapukanList);
						if (!dapukanList || dapukanList.length === 0) {
							console.warn('No dapukan data found. Check database tables.');
						}
					} catch (error) {
						console.error('Error loading dapukan:', error);
						dapukanList = [];
					}
					break;
				case 'jamaah':
					console.log('Calling JamaahService.getAllJamaah()');
					try {
						jamaahList = await JamaahService.getAllJamaah();
						console.log('Jamaah data loaded:', jamaahList);
						if (!jamaahList || jamaahList.length === 0) {
							console.warn('No jamaah data found. Check database tables.');
						}
					} catch (error) {
						console.error('Error loading jamaah:', error);
						jamaahList = [];
					}
					break;
			}
		} catch (error) {
			console.error('Error loading data:', error);
			showMessage('error', 'Gagal memuat data: ' + (error instanceof Error ? error.message : 'Unknown error'));
		} finally {
			isDataLoading = false;
			// Force update filtered data after loading
			console.log('Manually updating filteredData after load...');
			filteredData = filterData(getCurrentData(), searchQuery);
			console.log('Updated filteredData length:', filteredData.length);
		}
	}

	function handleTabChange(tabId) {
		selectedTab = tabId;
		searchQuery = ''; // Reset search when changing tabs
		loadData();
	}

	async function handleAdd() {
		modalMode = 'create';
		selectedItem = null;
		formData = {};
		formErrors = {};

		// Load relational data based on tab
		await loadRelationalData();

		showModal = true;
	}

	async function handleEdit(item) {
		modalMode = 'edit';
		selectedItem = item;
		formData = { ...item };
		formErrors = {};

		// Load relational data based on tab
		await loadRelationalData();

		showModal = true;
	}

	async function loadRelationalData() {
		try {
			if (selectedTab === 'kelompok') {
				// Load desa and daerah options for kelompok form
				desaOptionsForKelompok = await KelompokService.getAllDesa();
				daerahOptionsForKelompok = await KelompokService.getAllDaerah();
			} else if (selectedTab === 'masjid') {
				// Load kelompok options for masjid form
				kelompokOptionsForMasjid = await MasjidService.getAllKelompok();
			} else if (selectedTab === 'jamaah') {
				// Load options for jamaah form
				kategoriOptionsForJamaah = await JamaahService.getAllKategori();
				kelompokOptionsForJamaah = await JamaahService.getAllKelompok();
				dapukanOptionsForJamaah = await JamaahService.getAllDapukan();
			}
		} catch (error) {
			console.error('Error loading relational data:', error);
		}
	}

	function handleView(item) {
		modalMode = 'view';
		selectedItem = item;
		formData = { ...item };
		showModal = true;
	}

	async function handleDelete(item) {
		const itemName = getItemName(item);
		if (!confirm(`Apakah Anda yakin ingin menghapus "${itemName}"?\n\nData yang dihapus tidak dapat dikembalikan.`)) {
			return;
		}

		try {
			switch (selectedTab) {
				case 'pengajian':
					await PengajianService.deletePengajian(item.id);
					break;
				case 'daerah':
					await DaerahService.deleteDaerah(item.id);
					break;
				case 'desa':
					await DesaService.deleteDesa(item.id);
					break;
				case 'kelompok':
					await KelompokService.deleteKelompok(item.id);
					break;
				case 'masjid':
					await MasjidService.deleteMasjid(item.id);
					break;
				case 'kategori':
					await KategoriService.deleteKategori(item.id);
					break;
				case 'hadist':
					await HadistService.deleteHadist(item.id);
					break;
				case 'alquran':
					await AlQuranService.deleteAlQuran(item.id);
					break;
				case 'dapukan':
					await DapukanService.deleteDapukan(item.id);
					break;
				case 'jamaah':
					await JamaahService.deleteJamaah(item.id);
					break;
			}

			showMessage('success', `"${itemName}" berhasil dihapus`);
			await loadData();
		} catch (error) {
			console.error('Error deleting item:', error);
			showMessage('error', 'Gagal menghapus data: ' + (error instanceof Error ? error.message : 'Unknown error'));
		}
	}

	async function handleSave() {
		// Validate form
		if (!validateForm()) {
			return;
		}

		isSaving = true;
		try {
			if (modalMode === 'create') {
				switch (selectedTab) {
					case 'pengajian':
						await PengajianService.createPengajian(formData);
						break;
					case 'daerah':
						await DaerahService.createDaerah(formData);
						break;
					case 'desa':
						await DesaService.createDesa(formData);
						break;
					case 'kelompok':
						await KelompokService.createKelompok(formData);
						break;
					case 'masjid':
						await MasjidService.createMasjid(formData);
						break;
					case 'kategori':
						await KategoriService.createKategori(formData);
						break;
					case 'hadist':
						await HadistService.createHadist(formData);
						break;
					case 'alquran':
						await AlQuranService.createAlQuran(formData);
						break;
					case 'dapukan':
						await DapukanService.createDapukan(formData);
						break;
					case 'jamaah':
						await JamaahService.createJamaah(formData);
						break;
				}
				showMessage('success', 'Data berhasil ditambahkan');
			} else if (modalMode === 'edit') {
				switch (selectedTab) {
					case 'pengajian':
						await PengajianService.updatePengajian(selectedItem?.id, formData);
						break;
					case 'daerah':
						await DaerahService.updateDaerah(selectedItem?.id, formData);
						break;
					case 'desa':
						await DesaService.updateDesa(selectedItem?.id, formData);
						break;
					case 'kelompok':
						await KelompokService.updateKelompok(selectedItem?.id, formData);
						break;
					case 'masjid':
						await MasjidService.updateMasjid(selectedItem?.id, formData);
						break;
					case 'kategori':
						await KategoriService.updateKategori(selectedItem?.id, formData);
						break;
					case 'hadist':
						await HadistService.updateHadist(selectedItem?.id, formData);
						break;
					case 'alquran':
						await AlQuranService.updateAlQuran(selectedItem?.id, formData);
						break;
					case 'dapukan':
						await DapukanService.updateDapukan(selectedItem?.id, formData);
						break;
					case 'jamaah':
						await JamaahService.updateJamaah(selectedItem?.id, formData);
						break;
				}
				showMessage('success', 'Data berhasil diperbarui');
			}

			showModal = false;
			await loadData();
		} catch (error) {
			console.error('Error saving data:', error);
			showMessage('error', 'Gagal menyimpan data: ' + (error instanceof Error ? error.message : 'Unknown error'));
		} finally {
			isSaving = false;
		}
	}

	function validateForm() {
		formErrors = {};
		let isValid = true;

		switch (selectedTab) {
			case 'pengajian':
				if (!formData?.nama_pengajian?.trim()) {
					formErrors.nama_pengajian = 'Nama pengajian wajib diisi';
					isValid = false;
				}
				break;
			case 'daerah':
				if (!formData?.nama_daerah?.trim()) {
					formErrors.nama_daerah = 'Nama daerah wajib diisi';
					isValid = false;
				}
				break;
			case 'desa':
				if (!formData?.nama_desa?.trim()) {
					formErrors.nama_desa = 'Nama desa wajib diisi';
					isValid = false;
				}
				break;
			case 'kelompok':
				if (!formData?.nama_kelompok?.trim()) {
					formErrors.nama_kelompok = 'Nama kelompok wajib diisi';
					isValid = false;
				}
				if (!formData?.id_daerah) {
					formErrors.id_daerah = 'Daerah wajib dipilih';
					isValid = false;
				}
				if (!formData?.id_desa) {
					formErrors.id_desa = 'Desa wajib dipilih';
					isValid = false;
				}
				break;
			case 'masjid':
				if (!formData?.nama_masjid?.trim()) {
					formErrors.nama_masjid = 'Nama masjid wajib diisi';
					isValid = false;
				}
				if (!formData?.id_kelompok) {
					formErrors.id_kelompok = 'Kelompok wajib dipilih';
					isValid = false;
				}
				break;
			case 'kategori':
				if (!formData?.category?.trim()) {
					formErrors.category = 'Kategori wajib diisi';
					isValid = false;
				}
				break;
			case 'hadist':
				if (!formData?.nama_hadist?.trim()) {
					formErrors.nama_hadist = 'Nama hadist wajib diisi';
					isValid = false;
				}
				if (!formData?.jumlah_halaman || formData.jumlah_halaman < 1) {
					formErrors.jumlah_halaman = 'Jumlah halaman harus lebih dari 0';
					isValid = false;
				}
				break;
			case 'alquran':
				if (!formData?.nama_surat?.trim()) {
					formErrors.nama_surat = 'Nama surat wajib diisi';
					isValid = false;
				}
				if (!formData?.juz || formData.juz < 1 || formData.juz > 30) {
					formErrors.juz = 'Juz harus antara 1-30';
					isValid = false;
				}
				if (!formData?.jumlah_ayat || formData.jumlah_ayat < 1) {
					formErrors.jumlah_ayat = 'Jumlah ayat harus lebih dari 0';
					isValid = false;
				}
				break;
			case 'dapukan':
				if (!formData?.nama_dapukan?.trim()) {
					formErrors.nama_dapukan = 'Nama dapukan wajib diisi';
					isValid = false;
				}
				break;
			case 'jamaah':
				if (!formData?.nama?.trim()) {
					formErrors.nama = 'Nama lengkap wajib diisi';
					isValid = false;
				}
				if (!formData?.tgl_lahir) {
					formErrors.tgl_lahir = 'Tanggal lahir wajib diisi';
					isValid = false;
				}
				if (!formData?.jk) {
					formErrors.jk = 'Jenis kelamin wajib dipilih';
					isValid = false;
				}
				if (!formData?.id_kategori) {
					formErrors.id_kategori = 'Kategori jamaah wajib dipilih';
					isValid = false;
				}
				if (!formData?.id_kelompok) {
					formErrors.id_kelompok = 'Kelompok wajib dipilih';
					isValid = false;
				}
				// Email validation if provided
				if (formData?.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
					formErrors.email = 'Format email tidak valid';
					isValid = false;
				}
				break;
		}

		return isValid;
	}

	function filterData(data, query) {
		if (!query.trim()) return data;

		const searchTerm = query.toLowerCase();
		return data.filter(item => {
			const itemName = getItemName(item).toLowerCase();
			return itemName.includes(searchTerm);
		});
	}

	function getItemName(item) {
		switch (selectedTab) {
			case 'pengajian': return item.nama_pengajian || '';
			case 'daerah': return item.nama_daerah || '';
			case 'desa': return item.nama_desa || '';
			case 'kelompok': return item.nama_kelompok || '';
			case 'masjid': return item.nama_masjid || '';
			case 'kategori': return item.category || '';
			case 'hadist': return item.nama_hadist || '';
			case 'alquran': return item.nama_surat || '';
			case 'dapukan': return item.nama_dapukan || '';
			case 'jamaah': return item.nama || '';
			default: return '';
		}
	}

	function getCurrentData() {
		switch (selectedTab) {
			case 'pengajian': return pengajianList;
			case 'daerah': return daerahList;
			case 'desa': return desaList;
			case 'kelompok': return kelompokList;
			case 'masjid': return masjidList;
			case 'kategori': return kategoriList;
			case 'hadist': return hadistList;
			case 'alquran': return alquranList;
			case 'dapukan': return dapukanList;
			case 'jamaah': return jamaahList;
			default: return [];
		}
	}

	function showMessage(type, text) {
		message = { type, text, show: true };
		setTimeout(() => {
			message.show = false;
		}, 3000);
	}

	function handleRefresh() {
		loadData();
	}

	function handleCloseModal() {
		showModal = false;
		formData = {};
		formErrors = {};
	}
</script>

<svelte:head>
	<title>Master Data - Absensi Pengajian</title>
</svelte:head>

<svelte:window bind:innerWidth />

<AppHeader title="Master Data" showBack={true} />

{#if message.show}
	<div class="message {message.type}" class:desktop={isDesktop}>
		<div class="message-content">
			<AlertCircle size={20} />
			<span>{message.text}</span>
		</div>
	</div>
{/if}

{#if isLoading}
	<div class="loading-container">
		<div class="loading-content">
			<div class="spinner"></div>
			<p class="loading-text">Memuat data master...</p>
		</div>
	</div>
{:else if !isSuperAdmin}
	<div class="access-denied">
		<div class="access-content">
			<Shield size={80} class="access-icon" />
			<h2>Akses Ditolak</h2>
			<p>Halaman ini hanya dapat diakses oleh Super Admin.</p>
			<p class="access-subtitle">Silakan hubungi administrator untuk mendapatkan akses.</p>
		</div>
	</div>
{:else}
	<main class="app-content" class:desktop={isDesktop}>
		<!-- Tab Navigation -->
		<div class="tab-navigation" class:desktop={isDesktop}>
			<div class="tab-container">
				{#each tabs as tab}
					<button
						class="tab-button"
						class:active={selectedTab === tab.id}
						class:desktop={isDesktop}
						on:click={() => handleTabChange(tab.id)}
						title={tab.description}
					>
						<div class="tab-icon {tab.color}">
							<svelte:component this={tab.icon} size={18} />
						</div>
						<span class="tab-label">{tab.label}</span>
						{#if selectedTab === tab.id}
							<div class="tab-indicator"></div>
						{/if}
					</button>
				{/each}
			</div>
		</div>

		<!-- Content Area -->
		<div class="content-area" class:desktop={isDesktop}>
			<!-- Header with Search and Actions -->
			<div class="content-header">
				<div class="header-left">
					<div class="header-info">
						<h1>{tabs.find(t => t.id === selectedTab)?.label || 'Master Data'}</h1>
						<p class="header-description">{tabs.find(t => t.id === selectedTab)?.description}</p>
						<div class="data-stats">
							<span class="data-count">{filteredData.length} dari {getCurrentData().length} data</span>
							{#if searchQuery}
								<span class="search-info">• Hasil pencarian: "{searchQuery}"</span>
							{/if}
						</div>
					</div>
				</div>
				<div class="header-actions">
					<div class="search-container enhanced">
						<div class="search-wrapper">
							<Search size={18} class="search-icon" />
							<input
								type="text"
								placeholder="Cari {tabs.find(t => t.id === selectedTab)?.label.toLowerCase() || 'data'}..."
								bind:value={searchQuery}
								class="search-input enhanced"
							/>
							{#if searchQuery}
								<button class="clear-search" on:click={() => searchQuery = ''} title="Hapus pencarian">
									<X size={16} />
								</button>
							{/if}
						</div>
						{#if searchQuery && filteredData.length > 0}
							<div class="search-results-info">
								Ditemukan {filteredData.length} dari {getCurrentData().length} data
							</div>
						{/if}
					</div>
					<button class="action-btn refresh" on:click={handleRefresh} disabled={isDataLoading} title="Refresh Data">
						<RefreshCw size={18} class={isDataLoading ? 'spin' : ''} />
					</button>
					<button class="action-btn primary" on:click={handleAdd}>
						<Plus size={18} />
						<span>Tambah</span>
					</button>
				</div>
			</div>

			<!-- Data Table -->
			<div class="data-table" class:desktop={isDesktop}>
				{#if isDataLoading}
					<div class="loading-state">
						<div class="loading-spinner"></div>
						<p>Memuat data...</p>
					</div>
				{:else if filteredData.length === 0}
					<div class="empty-state">
						{#if searchQuery}
							<Search size={64} class="empty-icon" />
							<h3>Tidak ada hasil</h3>
							<p>Tidak ditemukan data yang cocok dengan pencarian "{searchQuery}"</p>
							<button class="clear-search-btn" on:click={() => searchQuery = ''}>
								Hapus Filter
							</button>
						{:else}
							<Database size={64} class="empty-icon" />
							<h3>Belum ada data</h3>
							<p>Klik tombol "Tambah" untuk menambahkan data baru</p>
							<div class="text-xs text-gray-400 mb-4">
								Debug: Tab = {selectedTab} |
								Data Length = {getCurrentData().length} |
								{#if selectedTab === 'kelompok'}
									Kelompok List = {Array.isArray(kelompokList) ? kelompokList.length : 'undefined'}
								{:else if selectedTab === 'masjid'}
									Masjid List = {Array.isArray(masjidList) ? masjidList.length : 'undefined'}
								{:else if selectedTab === 'pengajian'}
									Pengajian List = {Array.isArray(pengajianList) ? pengajianList.length : 'undefined'}
								{:else if selectedTab === 'daerah'}
									Daerah List = {Array.isArray(daerahList) ? daerahList.length : 'undefined'}
								{:else if selectedTab === 'desa'}
									Desa List = {Array.isArray(desaList) ? desaList.length : 'undefined'}
								{:else if selectedTab === 'kategori'}
									Kategori List = {Array.isArray(kategoriList) ? kategoriList.length : 'undefined'}
								{:else if selectedTab === 'hadist'}
									Hadist List = {Array.isArray(hadistList) ? hadistList.length : 'undefined'}
								{:else if selectedTab === 'alquran'}
									AlQuran List = {Array.isArray(alquranList) ? alquranList.length : 'undefined'}
								{:else if selectedTab === 'dapukan'}
									Dapukan List = {Array.isArray(dapukanList) ? dapukanList.length : 'undefined'}
								{:else if selectedTab === 'jamaah'}
									Jamaah List = {Array.isArray(jamaahList) ? jamaahList.length : 'undefined'}
								{/if}
								<div class="mt-2 text-blue-600">
									💡 Periksa console untuk log detail debugging
								</div>
								<div class="mt-1 text-green-600 text-xs">
									🔧 Jalankan: node test-all-master.js untuk test database
								</div>
							</div>
							<button class="add-first-btn" on:click={handleAdd}>
								<Plus size={18} />
								Tambah Data Pertama
							</button>
						{/if}
					</div>
				{:else}
					<!-- Card Grid Layout -->
					<div class="cards-container" class:desktop={isDesktop}>
						{#each filteredData as item, index}
							<div class="data-card" class:desktop={isDesktop}>
								<div class="card-header">
									<div class="card-number">#{index + 1}</div>
									<div class="card-actions">
										<button class="action-btn view" on:click={() => handleView(item)} title="Lihat Detail">
											<Eye size={14} />
										</button>
										<button class="action-btn edit" on:click={() => handleEdit(item)} title="Edit Data">
											<Edit size={14} />
										</button>
										<button class="action-btn delete" on:click={() => handleDelete(item)} title="Hapus Data">
											<Trash2 size={14} />
										</button>
									</div>
								</div>

								<div class="card-content">
									<div class="card-title">
										{getItemName(item)}
									</div>

									{#if selectedTab === 'kategori'}
										<div class="card-info">
											<span class="info-label">Group:</span>
											<span class="badge secondary">{item.group || '-'}</span>
										</div>
									{/if}

						{#  #}{#if selectedTab === 'kelompok'}
										<div class="card-info">
											<span class="info-label">Desa:</span>
											<span class="info-value">{item.mdesa?.nama_desa || '-'}</span>
										</div>
										<div class="card-info">
											<span class="info-label">Daerah:</span>
											<span class="info-value">{item.mdaerah?.nama_daerah || '-'}</span>
										</div>
									{/if}

									{#if selectedTab === 'masjid'}
										<div class="card-info">
											<span class="info-label">Kelompok:</span>
											<span class="info-value">{item.mkelompok?.nama_kelompok || '-'}</span>
										</div>
									{/if}

									{#if selectedTab === 'hadist'}
										<div class="card-info">
											<span class="info-label">Halaman:</span>
											<span class="badge info">{item.jumlah_halaman} hal</span>
										</div>
									{/if}

									{#if selectedTab === 'alquran'}
										<div class="card-info">
											<span class="info-label">Juz:</span>
											<span class="badge primary">Juz {item.juz}</span>
										</div>
										<div class="card-info">
											<span class="info-label">Ayat:</span>
											<span class="badge success">{item.jumlah_ayat} ayat</span>
										</div>
									{/if}

									{#if selectedTab === 'jamaah'}
										<div class="card-info">
											<span class="info-label">JK:</span>
											<span class="badge {item.jk === 'L' ? 'primary' : 'secondary'}">{item.jk === 'L' ? 'Laki-laki' : 'Perempuan'}</span>
										</div>
										<div class="card-info">
											<span class="info-label">Kategori:</span>
											<span class="badge info">{item.mkategori?.category || '-'}</span>
										</div>
										<div class="card-info">
											<span class="info-label">Kelompok:</span>
											<span class="info-value">{item.mkelompok?.nama_kelompok || '-'}</span>
										</div>
										<div class="card-info">
											<span class="info-label">Umur:</span>
											<span class="info-value">
												{#if item.tgl_lahir}
													{Math.floor((new Date() - new Date(item.tgl_lahir)) / (365.25 * 24 * 60 * 60 * 1000))} tahun
												{:else}
													-
												{/if}
											</span>
										</div>
									{/if}

									{#if item.created_at}
										<div class="card-meta">
											<span class="meta-text">Dibuat: {new Date(item.created_at).toLocaleDateString('id-ID')}</span>
										</div>
									{/if}
								</div>
							</div>
						{/each}
					</div>
				{/if}
			</div>
		</div>
	</main>
{/if}

<!-- Modal for Create/Edit/View -->
{#if showModal}
	<div class="modal-overlay"
		role="dialog"
		aria-modal="true"
		aria-labelledby="modal-title"
		on:click={handleCloseModal}
		on:keydown={(e) => e.key === 'Escape' && handleCloseModal()}>
		<div class="modal-content"
			class:desktop={isDesktop}
			on:click|stopPropagation
			on:keydown|stopPropagation>
			<div class="modal-header">
				<div class="modal-title">
					<h2 id="modal-title">
						{modalMode === 'create' ? 'Tambah' : modalMode === 'edit' ? 'Edit' : 'Detail'}
						{tabs.find(t => t.id === selectedTab)?.label}
					</h2>
					{#if modalMode !== 'view'}
						<p class="modal-subtitle">
							{modalMode === 'create' ? 'Isi form di bawah untuk menambah data baru' : 'Ubah informasi sesuai kebutuhan'}
						</p>
					{/if}
				</div>
				<button class="close-button" on:click={handleCloseModal}>
					<X size={20} />
				</button>
			</div>

			<div class="modal-body">
				<!-- Form fields based on selected tab -->
				{#if selectedTab === 'pengajian'}
					<div class="form-group">
						<label class="form-label" for="nama_pengajian">Nama Pengajian</label>
						<input
							id="nama_pengajian"
							type="text"
							class="form-input"
							class:error={formErrors.nama_pengajian}
							bind:value={formData.nama_pengajian}
							disabled={modalMode === 'view'}
							placeholder="Masukkan nama pengajian"
						/>
						{#if formErrors.nama_pengajian}
							<span class="error-message">{formErrors.nama_pengajian}</span>
						{/if}
					</div>
				{:else if selectedTab === 'daerah'}
					<div class="form-group">
						<label class="form-label" for="nama_daerah">Nama Daerah</label>
						<input
							id="nama_daerah"
							type="text"
							class="form-input"
							class:error={formErrors.nama_daerah}
							bind:value={formData.nama_daerah}
							disabled={modalMode === 'view'}
							placeholder="Masukkan nama daerah"
						/>
						{#if formErrors.nama_daerah}
							<span class="error-message">{formErrors.nama_daerah}</span>
						{/if}
					</div>
				{:else if selectedTab === 'desa'}
					<div class="form-group">
						<label class="form-label" for="nama_desa">Nama Desa</label>
						<input
							id="nama_desa"
							type="text"
							class="form-input"
							class:error={formErrors.nama_desa}
							bind:value={formData.nama_desa}
							disabled={modalMode === 'view'}
							placeholder="Masukkan nama desa"
						/>
						{#if formErrors.nama_desa}
							<span class="error-message">{formErrors.nama_desa}</span>
						{/if}
					</div>
				{:else if selectedTab === 'kelompok'}
					<div class="form-group">
						<label class="form-label" for="nama_kelompok">Nama Kelompok</label>
						<input
							id="nama_kelompok"
							type="text"
							class="form-input"
							class:error={formErrors.nama_kelompok}
							bind:value={formData.nama_kelompok}
							disabled={modalMode === 'view'}
							placeholder="Masukkan nama kelompok"
						/>
						{#if formErrors.nama_kelompok}
							<span class="error-message">{formErrors.nama_kelompok}</span>
						{/if}
					</div>
					<div class="form-group">
						<label class="form-label" for="id_daerah">Daerah</label>
						<select
							id="id_daerah"
							class="form-input"
							class:error={formErrors.id_daerah}
							bind:value={formData.id_daerah}
							disabled={modalMode === 'view'}
						>
							<option value="">Pilih Daerah</option>
							{#each daerahOptionsForKelompok as daerah}
								<option value={daerah.id}>{daerah.nama_daerah}</option>
							{/each}
						</select>
						{#if formErrors.id_daerah}
							<span class="error-message">{formErrors.id_daerah}</span>
						{/if}
					</div>
					<div class="form-group">
						<label class="form-label" for="id_desa">Desa</label>
						<select
							id="id_desa"
							class="form-input"
							class:error={formErrors.id_desa}
							bind:value={formData.id_desa}
							disabled={modalMode === 'view'}
						>
							<option value="">Pilih Desa</option>
							{#each desaOptionsForKelompok as desa}
								<option value={desa.id}>{desa.nama_desa}</option>
							{/each}
						</select>
						{#if formErrors.id_desa}
							<span class="error-message">{formErrors.id_desa}</span>
						{/if}
					</div>
				{:else if selectedTab === 'masjid'}
					<div class="form-group">
						<label class="form-label" for="nama_masjid">Nama Masjid</label>
						<input
							id="nama_masjid"
							type="text"
							class="form-input"
							class:error={formErrors.nama_masjid}
							bind:value={formData.nama_masjid}
							disabled={modalMode === 'view'}
							placeholder="Masukkan nama masjid"
						/>
						{#if formErrors.nama_masjid}
							<span class="error-message">{formErrors.nama_masjid}</span>
						{/if}
					</div>
					<div class="form-group">
						<label class="form-label" for="id_kelompok">Kelompok</label>
						<select
							id="id_kelompok"
							class="form-input"
							class:error={formErrors.id_kelompok}
							bind:value={formData.id_kelompok}
							disabled={modalMode === 'view'}
						>
							<option value="">Pilih Kelompok</option>
							{#each kelompokOptionsForMasjid as kelompok}
								<option value={kelompok.id}>{kelompok.nama_kelompok}</option>
							{/each}
						</select>
						{#if formErrors.id_kelompok}
							<span class="error-message">{formErrors.id_kelompok}</span>
						{/if}
					</div>
				{:else if selectedTab === 'kategori'}
					<div class="form-group">
						<label class="form-label" for="category">Kategori</label>
						<input
							id="category"
							type="text"
							class="form-input"
							class:error={formErrors.category}
							bind:value={formData.category}
							disabled={modalMode === 'view'}
							placeholder="Masukkan nama kategori"
						/>
						{#if formErrors.category}
							<span class="error-message">{formErrors.category}</span>
						{/if}
					</div>
					<div class="form-group">
						<label class="form-label" for="group">Group</label>
						<input
							id="group"
							type="text"
							class="form-input"
							bind:value={formData.group}
							disabled={modalMode === 'view'}
							placeholder="Masukkan group kategori (opsional)"
						/>
					</div>
				{:else if selectedTab === 'hadist'}
					<div class="form-group">
						<label class="form-label" for="nama_hadist">Nama Hadist</label>
						<input
							id="nama_hadist"
							type="text"
							class="form-input"
							class:error={formErrors.nama_hadist}
							bind:value={formData.nama_hadist}
							disabled={modalMode === 'view'}
							placeholder="Masukkan nama hadist"
						/>
						{#if formErrors.nama_hadist}
							<span class="error-message">{formErrors.nama_hadist}</span>
						{/if}
					</div>
					<div class="form-group">
						<label class="form-label" for="jumlah_halaman">Jumlah Halaman</label>
						<input
							id="jumlah_halaman"
							type="number"
							class="form-input"
							class:error={formErrors.jumlah_halaman}
							bind:value={formData.jumlah_halaman}
							disabled={modalMode === 'view'}
							placeholder="Masukkan jumlah halaman"
							min="1"
						/>
						{#if formErrors.jumlah_halaman}
							<span class="error-message">{formErrors.jumlah_halaman}</span>
						{/if}
					</div>
				{:else if selectedTab === 'alquran'}
					<div class="form-group">
						<label class="form-label" for="nama_surat">Nama Surat</label>
						<input
							id="nama_surat"
							type="text"
							class="form-input"
							class:error={formErrors.nama_surat}
							bind:value={formData.nama_surat}
							disabled={modalMode === 'view'}
							placeholder="Masukkan nama surat"
						/>
						{#if formErrors.nama_surat}
							<span class="error-message">{formErrors.nama_surat}</span>
						{/if}
					</div>
					<div class="form-group-row">
						<div class="form-group">
							<label class="form-label" for="juz">Juz</label>
							<input
								id="juz"
								type="number"
								class="form-input"
								class:error={formErrors.juz}
								bind:value={formData.juz}
								disabled={modalMode === 'view'}
								placeholder="1-30"
								min="1"
								max="30"
							/>
							{#if formErrors.juz}
								<span class="error-message">{formErrors.juz}</span>
							{/if}
						</div>
						<div class="form-group">
							<label class="form-label" for="jumlah_ayat">Jumlah Ayat</label>
							<input
								id="jumlah_ayat"
								type="number"
								class="form-input"
								class:error={formErrors.jumlah_ayat}
								bind:value={formData.jumlah_ayat}
								disabled={modalMode === 'view'}
								placeholder="Masukkan jumlah ayat"
								min="1"
							/>
							{#if formErrors.jumlah_ayat}
								<span class="error-message">{formErrors.jumlah_ayat}</span>
							{/if}
						</div>
					</div>
				{:else if selectedTab === 'dapukan'}
					<div class="form-group">
						<label class="form-label" for="nama_dapukan">Nama Dapukan</label>
						<input
							id="nama_dapukan"
							type="text"
							class="form-input"
							class:error={formErrors.nama_dapukan}
							bind:value={formData.nama_dapukan}
							disabled={modalMode === 'view'}
							placeholder="Masukkan nama dapukan"
						/>
						{#if formErrors.nama_dapukan}
							<span class="error-message">{formErrors.nama_dapukan}</span>
						{/if}
					</div>
					<div class="form-group">
						<label class="form-label" for="deskripsi">Deskripsi</label>
						<textarea
							id="deskripsi"
							class="form-textarea"
							bind:value={formData.deskripsi}
							disabled={modalMode === 'view'}
							placeholder="Masukkan deskripsi dapukan (opsional)"
							rows="3"
						></textarea>
					</div>
				{:else if selectedTab === 'jamaah'}
					<!-- Personal Information -->
					<div class="form-section">
						<h4 class="section-title">Informasi Pribadi</h4>
						<div class="form-group">
							<label class="form-label" for="nama">Nama Lengkap *</label>
							<input
								id="nama"
								type="text"
								class="form-input"
								class:error={formErrors.nama}
								bind:value={formData.nama}
								disabled={modalMode === 'view'}
								placeholder="Masukkan nama lengkap"
							/>
							{#if formErrors.nama}
								<span class="error-message">{formErrors.nama}</span>
							{/if}
						</div>
						<div class="form-group-row">
							<div class="form-group">
								<label class="form-label" for="tgl_lahir">Tanggal Lahir *</label>
								<input
									id="tgl_lahir"
									type="date"
									class="form-input"
									class:error={formErrors.tgl_lahir}
									bind:value={formData.tgl_lahir}
									disabled={modalMode === 'view'}
								/>
								{#if formErrors.tgl_lahir}
									<span class="error-message">{formErrors.tgl_lahir}</span>
								{/if}
							</div>
							<div class="form-group">
								<label class="form-label" for="jk">Jenis Kelamin *</label>
								<select
									id="jk"
									class="form-input"
									class:error={formErrors.jk}
									bind:value={formData.jk}
									disabled={modalMode === 'view'}
								>
									<option value="">Pilih Jenis Kelamin</option>
									<option value="L">Laki-laki</option>
									<option value="P">Perempuan</option>
								</select>
								{#if formErrors.jk}
									<span class="error-message">{formErrors.jk}</span>
								{/if}
							</div>
						</div>
						<div class="form-group">
							<label class="form-label" for="status_nikah">Status Pernikahan</label>
							<select
								id="status_nikah"
								class="form-input"
								bind:value={formData.status_nikah}
								disabled={modalMode === 'view'}
							>
								<option value="">Pilih Status</option>
								<option value="Belum Menikah">Belum Menikah</option>
								<option value="Menikah">Menikah</option>
							</select>
						</div>
					</div>

					<!-- Contact Information -->
					<div class="form-section">
						<h4 class="section-title">Informasi Kontak</h4>
						<div class="form-group">
							<label class="form-label" for="email">Email</label>
							<input
								id="email"
								type="email"
								class="form-input"
								class:error={formErrors.email}
								bind:value={formData.email}
								disabled={modalMode === 'view'}
								placeholder="contoh@email.com"
							/>
							{#if formErrors.email}
								<span class="error-message">{formErrors.email}</span>
							{/if}
						</div>
						<div class="form-group">
							<label class="form-label" for="telp_murid">No. Telepon</label>
							<input
								id="telp_murid"
								type="tel"
								class="form-input"
								bind:value={formData.telp_murid}
								disabled={modalMode === 'view'}
								placeholder="081234567890"
							/>
						</div>
						<div class="form-group">
							<label class="form-label" for="alamat">Alamat</label>
							<textarea
								id="alamat"
								class="form-textarea"
								bind:value={formData.alamat}
								disabled={modalMode === 'view'}
								placeholder="Masukkan alamat lengkap"
								rows="3"
							></textarea>
						</div>
					</div>

					<!-- Religious Information -->
					<div class="form-section">
						<h4 class="section-title">Informasi Pengajian</h4>
						<div class="form-group-row">
							<div class="form-group">
								<label class="form-label" for="id_kategori">Kategori Jamaah *</label>
								<select
									id="id_kategori"
									class="form-input"
									class:error={formErrors.id_kategori}
									bind:value={formData.id_kategori}
									disabled={modalMode === 'view'}
								>
									<option value="">Pilih Kategori</option>
									{#each kategoriOptionsForJamaah as kategori}
										<option value={kategori.id}>{kategori.category}</option>
									{/each}
								</select>
								{#if formErrors.id_kategori}
									<span class="error-message">{formErrors.id_kategori}</span>
								{/if}
							</div>
							<div class="form-group">
								<label class="form-label" for="id_kelompok">Kelompok *</label>
								<select
									id="id_kelompok"
									class="form-input"
									class:error={formErrors.id_kelompok}
									bind:value={formData.id_kelompok}
									disabled={modalMode === 'view'}
								>
									<option value="">Pilih Kelompok</option>
									{#each kelompokOptionsForJamaah as kelompok}
										<option value={kelompok.id}>{kelompok.nama_kelompok}</option>
									{/each}
								</select>
								{#if formErrors.id_kelompok}
									<span class="error-message">{formErrors.id_kelompok}</span>
								{/if}
							</div>
						</div>
						<div class="form-group">
							<label class="form-label" for="id_dapukan">Pilihan Dapukan</label>
							<select
								id="id_dapukan"
								class="form-input"
								bind:value={formData.id_dapukan}
								disabled={modalMode === 'view'}
							>
								<option value="">Pilih Dapukan</option>
								{#each dapukanOptionsForJamaah as dapukan}
									<option value={dapukan.id}>{dapukan.nama_dapukan}</option>
								{/each}
							</select>
						</div>
					</div>

					<!-- Educational Information -->
					<div class="form-section">
						<h4 class="section-title">Informasi Pendidikan</h4>
						<div class="form-group-row">
							<div class="form-group">
								<label class="form-label" for="pendidikan">Pendidikan Terakhir</label>
								<select
									id="pendidikan"
									class="form-input"
									bind:value={formData.pendidikan}
									disabled={modalMode === 'view'}
								>
									<option value="">Pilih Pendidikan</option>
									<option value="SD">SD</option>
									<option value="SMP">SMP</option>
									<option value="SMA/SMK">SMA/SMK</option>
									<option value="D3">D3</option>
									<option value="S1">S1</option>
									<option value="S2">S2</option>
									<option value="S3">S3</option>
								</select>
							</div>
							<div class="form-group">
								<label class="form-label" for="jurusan">Jurusan</label>
								<input
									id="jurusan"
									type="text"
									class="form-input"
									bind:value={formData.jurusan}
									disabled={modalMode === 'view'}
									placeholder="Masukkan jurusan"
								/>
							</div>
						</div>
						<div class="form-group">
							<label class="form-label" for="sekolah">Nama Sekolah/Universitas</label>
							<input
								id="sekolah"
								type="text"
								class="form-input"
								bind:value={formData.sekolah}
								disabled={modalMode === 'view'}
								placeholder="Masukkan nama sekolah/universitas"
							/>
						</div>
					</div>

					<!-- Guardian Information -->
					<div class="form-section">
						<h4 class="section-title">Informasi Wali</h4>
						<div class="form-group">
							<label class="form-label" for="walimurid">Nama Wali</label>
							<input
								id="walimurid"
								type="text"
								class="form-input"
								bind:value={formData.walimurid}
								disabled={modalMode === 'view'}
								placeholder="Masukkan nama wali"
							/>
						</div>
						<div class="form-group-row">
							<div class="form-group">
								<label class="form-label" for="telp_wali">No. Telepon Wali</label>
								<input
									id="telp_wali"
									type="tel"
									class="form-input"
									bind:value={formData.telp_wali}
									disabled={modalMode === 'view'}
									placeholder="081234567890"
								/>
							</div>
							<div class="form-group">
								<label class="form-label" for="email_wali">Email Wali</label>
								<input
									id="email_wali"
									type="email"
									class="form-input"
									bind:value={formData.email_wali}
									disabled={modalMode === 'view'}
									placeholder="wali@email.com"
								/>
							</div>
						</div>
						<div class="form-group">
							<label class="form-label" for="alamat_wali">Alamat Wali</label>
							<textarea
								id="alamat_wali"
								class="form-textarea"
								bind:value={formData.alamat_wali}
								disabled={modalMode === 'view'}
								placeholder="Masukkan alamat wali"
								rows="2"
							></textarea>
						</div>
					</div>
				{/if}
			</div>

			{#if modalMode !== 'view'}
				<div class="modal-footer">
					<button class="btn btn-secondary" on:click={handleCloseModal} disabled={isSaving}>
						Batal
					</button>
					<button class="btn btn-primary" on:click={handleSave} disabled={isSaving}>
						{#if isSaving}
							<div class="btn-spinner"></div>
							Menyimpan...
						{:else}
							<Save size={16} />
							{modalMode === 'create' ? 'Simpan' : 'Update'}
						{/if}
					</button>
				</div>
			{:else}
				<div class="modal-footer">
					<button class="btn btn-primary" on:click={handleCloseModal}>
						Tutup
					</button>
				</div>
			{/if}
		</div>
	</div>
{/if}

<BottomNav />

<style>
	/* Base Styles */
	.app-content {
		min-height: calc(100vh - 64px);
		background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
		padding-bottom: 80px;
	}

	.app-content.desktop {
		padding-bottom: 2rem;
		max-width: 1200px;
		margin: 0 auto;
	}

	/* Message Styles */
	.message {
		position: fixed;
		top: 80px;
		left: 1rem;
		right: 1rem;
		z-index: 40;
		animation: slideDown 0.3s ease-out;
	}

	.message.desktop {
		left: 50%;
		right: auto;
		transform: translateX(-50%);
		max-width: 400px;
	}

	.message-content {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		padding: 1rem 1.25rem;
		border-radius: 12px;
		font-size: 0.875rem;
		font-weight: 500;
		box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
	}

	.message.success .message-content {
		background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);
		color: #166534;
		border: 1px solid #86efac;
	}

	.message.error .message-content {
		background: linear-gradient(135deg, #fef2f2 0%, #fecaca 100%);
		color: #dc2626;
		border: 1px solid #f87171;
	}

	@keyframes slideDown {
		from {
			opacity: 0;
			transform: translateY(-100%);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	/* Loading States */
	.loading-container {
		display: flex;
		align-items: center;
		justify-content: center;
		min-height: 400px;
		padding: 2rem;
	}

	.loading-content {
		text-align: center;
	}

	.spinner, .loading-spinner {
		width: 40px;
		height: 40px;
		border: 3px solid #e5e7eb;
		border-top: 3px solid #0ea5e9;
		border-radius: 50%;
		animation: spin 1s linear infinite;
		margin: 0 auto 1rem;
	}

	.loading-spinner {
		width: 24px;
		height: 24px;
		border-width: 2px;
		margin: 0 auto 0.5rem;
	}

	@keyframes spin {
		0% { transform: rotate(0deg); }
		100% { transform: rotate(360deg); }
	}

	.spin {
		animation: spin 1s linear infinite;
	}

	.loading-text {
		color: #6b7280;
		font-size: 0.875rem;
		margin: 0;
	}

	.loading-state {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		padding: 3rem;
		color: #6b7280;
		font-size: 0.875rem;
	}

	/* Access Denied */
	.access-denied {
		display: flex;
		align-items: center;
		justify-content: center;
		min-height: 400px;
		padding: 2rem;
	}

	.access-content {
		text-align: center;
		max-width: 400px;
	}

	.access-icon {
		color: #dc2626;
		margin-bottom: 1.5rem;
	}

	.access-denied h2 {
		font-size: 1.5rem;
		font-weight: 700;
		color: #111827;
		margin: 0 0 1rem 0;
	}

	.access-denied p {
		color: #6b7280;
		margin: 0 0 0.5rem 0;
		line-height: 1.5;
	}

	.access-subtitle {
		font-size: 0.875rem;
		color: #9ca3af;
	}

	/* Tab Navigation */
	.tab-navigation {
		background: white;
		border-bottom: 1px solid #e5e7eb;
		overflow-x: auto;
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
	}

	.tab-navigation.desktop {
		position: sticky;
		top: 64px;
		z-index: 10;
	}

	.tab-container {
		display: flex;
		padding: 0 1rem;
		min-width: max-content;
	}

	.tab-button {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		padding: 1rem 1.5rem;
		border: none;
		background: transparent;
		color: #6b7280;
		font-size: 0.875rem;
		font-weight: 500;
		cursor: pointer;
		white-space: nowrap;
		transition: all 0.2s ease;
		position: relative;
		min-height: 60px;
	}

	.tab-button:hover {
		color: #374151;
		background: rgba(59, 130, 246, 0.05);
	}

	.tab-button.active {
		color: #0ea5e9;
		background: linear-gradient(135deg, rgba(14, 165, 233, 0.1) 0%, rgba(59, 130, 246, 0.05) 100%);
	}

	.tab-icon {
		width: 32px;
		height: 32px;
		border-radius: 8px;
		display: flex;
		align-items: center;
		justify-content: center;
		color: white;
		transition: all 0.2s ease;
	}

	.tab-button:not(.active) .tab-icon {
		background: #e5e7eb;
		color: #6b7280;
	}

	.tab-label {
		font-weight: 600;
	}

	.tab-indicator {
		position: absolute;
		bottom: 0;
		left: 0;
		right: 0;
		height: 3px;
		background: linear-gradient(135deg, #0ea5e9 0%, #3b82f6 100%);
		border-radius: 3px 3px 0 0;
	}

	/* Content Area */
	.content-area {
		padding: 1.5rem 1rem;
	}

	.content-area.desktop {
		padding: 2rem;
	}

	.content-header {
		display: flex;
		justify-content: space-between;
		align-items: flex-start;
		margin-bottom: 1.5rem;
		gap: 1rem;
	}

	.header-left {
		flex: 1;
		min-width: 0;
	}

	.header-info h1 {
		font-size: 1.75rem;
		font-weight: 700;
		color: #111827;
		margin: 0 0 0.5rem 0;
	}

	.header-description {
		font-size: 1rem;
		color: #6b7280;
		margin: 0 0 0.75rem 0;
	}

	.data-stats {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		font-size: 0.875rem;
		color: #9ca3af;
	}

	.search-info {
		color: #0ea5e9;
		font-weight: 500;
	}

	.header-actions {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		flex-shrink: 0;
	}

	.search-container {
		position: relative;
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}

	.search-container.enhanced {
		min-width: 250px;
	}

	.search-wrapper {
		position: relative;
		display: flex;
		align-items: center;
	}

	.search-icon {
		position: absolute;
		left: 0.75rem;
		color: #9ca3af;
		z-index: 1;
	}

	.search-input {
		padding: 0.75rem 0.75rem 0.75rem 2.5rem;
		border: 1px solid #d1d5db;
		border-radius: 8px;
		font-size: 0.875rem;
		background: white;
		color: #111827;
		width: 100%;
		transition: all 0.2s ease;
	}

	.search-input.enhanced {
		border-radius: 12px;
		border: 2px solid #e5e7eb;
		background: #f9fafb;
		font-weight: 500;
	}

	.search-input.enhanced:focus {
		outline: none;
		border-color: #3b82f6;
		background: white;
		box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
	}

	.clear-search {
		position: absolute;
		right: 0.75rem;
		background: none;
		border: none;
		color: #9ca3af;
		cursor: pointer;
		padding: 0.25rem;
		border-radius: 4px;
		transition: all 0.2s ease;
	}

	.clear-search:hover {
		color: #ef4444;
		background: #fef2f2;
	}

	.search-results-info {
		font-size: 0.75rem;
		color: #6b7280;
		font-weight: 500;
		padding: 0.25rem 0.75rem;
		background: #f0f9ff;
		border: 1px solid #e0f2fe;
		border-radius: 6px;
		text-align: center;
	}

	.search-input:focus {
		outline: none;
		border-color: #0ea5e9;
		box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1);
		width: 250px;
	}

	.clear-search {
		position: absolute;
		right: 0.5rem;
		padding: 0.25rem;
		border: none;
		background: transparent;
		color: #9ca3af;
		cursor: pointer;
		border-radius: 4px;
	}

	.clear-search:hover {
		color: #374151;
		background: #f3f4f6;
	}

	.action-btn {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.75rem 1rem;
		border: none;
		border-radius: 8px;
		font-size: 0.875rem;
		font-weight: 500;
		cursor: pointer;
		transition: all 0.2s ease;
		text-decoration: none;
	}

	.action-btn:disabled {
		opacity: 0.5;
		cursor: not-allowed;
	}

	.action-btn.primary {
		background: linear-gradient(135deg, #0ea5e9 0%, #0284c7 100%);
		color: white;
		box-shadow: 0 4px 12px rgba(14, 165, 233, 0.3);
	}

	.action-btn.primary:hover:not(:disabled) {
		box-shadow: 0 8px 20px rgba(14, 165, 233, 0.4);
		transform: translateY(-2px);
	}

	.action-btn.refresh {
		background: white;
		color: #6b7280;
		border: 1px solid #d1d5db;
		padding: 0.75rem;
	}

	.action-btn.refresh:hover:not(:disabled) {
		background: #f9fafb;
		color: #374151;
	}

	/* Data Table */
	.data-table {
		background: white;
		border-radius: 16px;
		border: 1px solid #e5e7eb;
		overflow: hidden;
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
	}

	.data-table.desktop {
		border-radius: 20px;
	}

	.empty-state {
		display: flex;
		flex-direction: column;
		align-items: center;
		padding: 4rem 2rem;
		text-align: center;
	}

	.empty-icon {
		color: #d1d5db;
		margin-bottom: 1.5rem;
	}

	.empty-state h3 {
		font-size: 1.25rem;
		font-weight: 600;
		color: #374151;
		margin: 0 0 0.5rem 0;
	}

	.empty-state p {
		color: #6b7280;
		margin: 0 0 1.5rem 0;
		line-height: 1.5;
	}

	.clear-search-btn, .add-first-btn {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.75rem 1.5rem;
		border: none;
		border-radius: 8px;
		font-size: 0.875rem;
		font-weight: 500;
		cursor: pointer;
		transition: all 0.2s ease;
	}

	.clear-search-btn {
		background: #f3f4f6;
		color: #374151;
		border: 1px solid #d1d5db;
	}

	.clear-search-btn:hover {
		background: #e5e7eb;
	}

	.add-first-btn {
		background: linear-gradient(135deg, #0ea5e9 0%, #0284c7 100%);
		color: white;
	}

	.add-first-btn:hover {
		box-shadow: 0 4px 12px rgba(14, 165, 233, 0.3);
		transform: translateY(-1px);
	}

	/* Cards Container Styles */
	.cards-container {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
		gap: 1rem;
		padding: 1rem 0;
	}

	.cards-container.desktop {
		grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
		gap: 1.5rem;
	}

	.data-card {
		background: white;
		border-radius: 12px;
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
		border: 1px solid #e5e7eb;
		overflow: hidden;
		transition: all 0.2s ease;
	}

	.data-card:hover {
		transform: translateY(-2px);
		box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
	}

	.data-card.desktop {
		border-radius: 16px;
	}

	.card-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 1rem;
		background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
		border-bottom: 1px solid #e5e7eb;
	}

	.card-number {
		font-weight: 600;
		color: #6b7280;
		font-size: 0.875rem;
	}

	.card-actions {
		display: flex;
		gap: 0.5rem;
	}

	.card-content {
		padding: 1rem;
	}

	.card-title {
		font-size: 1.125rem;
		font-weight: 600;
		color: #1f2937;
		margin-bottom: 0.75rem;
		line-height: 1.4;
	}

	.card-info {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.5rem 0;
		border-bottom: 1px solid #f3f4f6;
	}

	.card-info:last-of-type {
		border-bottom: none;
	}

	.info-label {
		font-weight: 500;
		color: #6b7280;
		font-size: 0.875rem;
	}

	.info-value {
		color: #1f2937;
		font-weight: 500;
		text-align: right;
	}

	.card-meta {
		margin-top: 0.75rem;
		padding-top: 0.75rem;
		border-top: 1px solid #f3f4f6;
	}

	.meta-text {
		font-size: 0.75rem;
		color: #9ca3af;
	}

	/* Old table styles - kept for compatibility */
	.table-container {
		overflow-x: auto;
	}

	.data-table-grid {
		width: 100%;
		border-collapse: collapse;
	}

	.data-table-grid th,
	.data-table-grid td {
		padding: 1rem;
		text-align: left;
		border-bottom: 1px solid #f3f4f6;
	}

	.data-table-grid th {
		background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
		font-weight: 600;
		color: #374151;
		font-size: 0.875rem;
		border-bottom: 2px solid #e5e7eb;
	}

	.data-table-grid td {
		font-size: 0.875rem;
		color: #111827;
	}

	.table-row:hover {
		background: #f9fafb;
	}

	.col-number {
		width: 60px;
		text-align: center;
		color: #9ca3af;
		font-weight: 500;
	}

	.col-name {
		min-width: 200px;
	}

	.name-cell {
		display: flex;
		flex-direction: column;
		gap: 0.25rem;
	}

	.name-text {
		font-weight: 600;
		color: #111827;
	}

	.name-meta {
		font-size: 0.75rem;
		color: #9ca3af;
	}

	.col-actions {
		width: 120px;
	}

	.action-buttons {
		display: flex;
		gap: 0.25rem;
	}

	.action-buttons .action-btn {
		padding: 0.5rem;
		border-radius: 6px;
		font-size: 0;
	}

	.action-buttons .action-btn.view {
		background: #f3f4f6;
		color: #6b7280;
	}

	.action-buttons .action-btn.view:hover {
		background: #e5e7eb;
		color: #374151;
	}

	.action-buttons .action-btn.edit {
		background: #fef3c7;
		color: #d97706;
	}

	.action-buttons .action-btn.edit:hover {
		background: #fde68a;
		color: #b45309;
	}

	.action-buttons .action-btn.delete {
		background: #fee2e2;
		color: #dc2626;
	}

	.action-buttons .action-btn.delete:hover {
		background: #fecaca;
		color: #b91c1c;
	}

	/* Badges */
	.badge {
		display: inline-flex;
		align-items: center;
		padding: 0.25rem 0.5rem;
		border-radius: 6px;
		font-size: 0.75rem;
		font-weight: 500;
	}

	.badge.primary {
		background: #dbeafe;
		color: #1d4ed8;
	}

	.badge.secondary {
		background: #f3f4f6;
		color: #374151;
	}

	.badge.success {
		background: #dcfce7;
		color: #166534;
	}

	.badge.info {
		background: #e0f2fe;
		color: #0891b2;
	}

	/* Modal Styles */
	.modal-overlay {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: rgba(0, 0, 0, 0.5);
		backdrop-filter: blur(4px);
		display: flex;
		align-items: center;
		justify-content: center;
		z-index: 50;
		padding: 1rem;
		animation: modalFadeIn 0.2s ease-out;
	}

	@keyframes modalFadeIn {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}

	.modal-content {
		background: white;
		border-radius: 16px;
		width: 100%;
		max-width: 500px;
		max-height: 90vh;
		overflow-y: auto;
		box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
		animation: modalSlideIn 0.3s ease-out;
	}

	.modal-content.desktop {
		max-width: 600px;
		border-radius: 20px;
	}

	@keyframes modalSlideIn {
		from {
			opacity: 0;
			transform: scale(0.95) translateY(-10px);
		}
		to {
			opacity: 1;
			transform: scale(1) translateY(0);
		}
	}

	.modal-header {
		display: flex;
		justify-content: space-between;
		align-items: flex-start;
		padding: 1.5rem;
		border-bottom: 1px solid #e5e7eb;
	}

	.modal-title h2 {
		font-size: 1.25rem;
		font-weight: 700;
		color: #111827;
		margin: 0 0 0.25rem 0;
	}

	.modal-subtitle {
		font-size: 0.875rem;
		color: #6b7280;
		margin: 0;
	}

	.close-button {
		padding: 0.5rem;
		border: none;
		background: #f3f4f6;
		color: #6b7280;
		cursor: pointer;
		border-radius: 8px;
		transition: all 0.2s ease;
	}

	.close-button:hover {
		background: #e5e7eb;
		color: #374151;
	}

	.modal-body {
		padding: 1.5rem;
	}

	.form-group {
		margin-bottom: 1.5rem;
	}

	.form-group-row {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 1rem;
		margin-bottom: 1.5rem;
	}

	.form-label {
		display: block;
		font-size: 0.875rem;
		font-weight: 600;
		color: #374151;
		margin-bottom: 0.5rem;
	}

	.form-input,
	.form-textarea {
		width: 100%;
		padding: 0.75rem;
		border: 1px solid #d1d5db;
		border-radius: 8px;
		font-size: 0.875rem;
		color: #111827;
		background: white;
		transition: all 0.2s ease;
	}

	.form-input:focus,
	.form-textarea:focus {
		outline: none;
		border-color: #0ea5e9;
		box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1);
	}

	.form-input:disabled,
	.form-textarea:disabled {
		background: #f9fafb;
		color: #6b7280;
		cursor: not-allowed;
	}

	.form-input.error,
	.form-textarea.error {
		border-color: #dc2626;
		box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
	}

	.form-textarea {
		resize: vertical;
		min-height: 80px;
	}

	.error-message {
		display: block;
		font-size: 0.75rem;
		color: #dc2626;
		margin-top: 0.25rem;
	}

	.modal-footer {
		display: flex;
		gap: 1rem;
		padding: 1.5rem;
		border-top: 1px solid #e5e7eb;
		background: #f9fafb;
		border-radius: 0 0 16px 16px;
	}

	.btn {
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 0.5rem;
		padding: 0.75rem 1.5rem;
		border-radius: 8px;
		font-size: 0.875rem;
		font-weight: 500;
		cursor: pointer;
		transition: all 0.2s ease;
		border: none;
		flex: 1;
	}

	.btn:disabled {
		opacity: 0.6;
		cursor: not-allowed;
	}

	.btn-secondary {
		background: white;
		color: #374151;
		border: 1px solid #d1d5db;
	}

	.btn-secondary:hover:not(:disabled) {
		background: #f9fafb;
		border-color: #9ca3af;
	}

	.btn-primary {
		background: linear-gradient(135deg, #0ea5e9 0%, #0284c7 100%);
		color: white;
	}

	.btn-primary:hover:not(:disabled) {
		box-shadow: 0 4px 12px rgba(14, 165, 233, 0.3);
		transform: translateY(-1px);
	}

	.btn-spinner {
		width: 16px;
		height: 16px;
		border: 2px solid rgba(255, 255, 255, 0.3);
		border-top: 2px solid white;
		border-radius: 50%;
		animation: spin 1s linear infinite;
	}

	/* Form Section Styling for Jamaah */
	.form-section {
		margin-bottom: 2rem;
		padding-bottom: 1.5rem;
		border-bottom: 1px solid #e5e7eb;
	}

	.form-section:last-child {
		border-bottom: none;
		margin-bottom: 0;
		padding-bottom: 0;
	}

	.section-title {
		font-size: 1rem;
		font-weight: 600;
		color: #374151;
		margin: 0 0 1rem 0;
		padding-bottom: 0.5rem;
		border-bottom: 2px solid #e5e7eb;
		position: relative;
	}

	.section-title::after {
		content: '';
		position: absolute;
		bottom: -2px;
		left: 0;
		width: 50px;
		height: 2px;
		background: linear-gradient(135deg, #0ea5e9 0%, #0284c7 100%);
	}

	/* Responsive */
	@media (max-width: 768px) {
		.content-header {
			flex-direction: column;
			align-items: stretch;
			gap: 1rem;
		}

		.header-actions {
			flex-direction: column;
			align-items: stretch;
		}

		.search-container {
			order: -1;
		}

		.search-input {
			width: 100%;
		}

		.search-input:focus {
			width: 100%;
		}

		.form-group-row {
			grid-template-columns: 1fr;
		}

		.modal-content {
			margin: 0;
			border-radius: 12px 12px 0 0;
			max-height: 95vh;
		}

		.modal-footer {
			border-radius: 0;
		}
	}

	@media (max-width: 640px) {
		.tab-container {
			padding: 0 0.5rem;
		}

		.tab-button {
			padding: 0.75rem 1rem;
		}

		.tab-icon {
			width: 28px;
			height: 28px;
		}

		.content-area {
			padding: 1rem;
		}

		.header-info h1 {
			font-size: 1.5rem;
		}

		.action-buttons {
			flex-direction: column;
			gap: 0.25rem;
		}

		.action-buttons .action-btn {
			padding: 0.5rem 0.75rem;
			font-size: 0.75rem;
			justify-content: center;
		}

		.col-actions {
			width: 80px;
		}
	}
</style>
